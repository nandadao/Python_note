day16复习

=================================================
总复习(复习之前的内容)
    1.异常处理
        1.异常现象：程序不再向下执行，而是不断返回给调用者。
        2.处理目的：将异常现象(向上翻)  -->  正常现象(向下走)
        3.手段:
            try:
                可能出错的代码
            except 错误类型:
                针对该错误的处理逻辑
            except:    # except  Exception:
                针对所有错误的处理逻辑
            else:
                没有错误的逻辑

            try:
                可能出错的代码
            finally:
                不论对错，一定执行逻辑

        4.主动抛出异常原因：
            快速传递错误信息
            如果信息过多，将数据封装到自定义异常类中
        5.原则：就近处理


    2.迭代iter
        可迭代对象iter able
            1.__iter__()
            2.价值：能够被for


        迭代器 iter ator
            1.__next__()
            2.价值：能股获取下一个元素


        1.快捷键iter + Tab



=======================================
day17

1.快捷键
    iter 然后按 Tab可以出现
    for  in list01:

2.for 循环
    # 循环一次，计算一个，返回一个

3.yield
    # 调用不执行
    # 调用__next__才执行
    # 到yield暂时离开
    # 再次调用__next__ 继续执行
    # ...


    # 程序执行原理：你看见的代码实际不是这个样子
    #   1.将yield关键字以前的代码定义到next方法中
    #   2.将yield关键字以后的数据作为next方法返回值
    def __iter__(self):
        begin = 0
        while begin < self.__number:
            yield begin   # 暂时离开，再次调用继续执行
            begin += 1

4.生成器generator

# 生成器 --->  迭代器(迭代器比较重要) + 可迭代对象
# class Generator:
#     def __iter__(self):
#         return self
#
#     def __next__(self):
#         ...
#
        1.定义：能够动态(循环一次计算一次返回一次)提供数据的可迭代对象。
        2.作用：在循环过程中，按照某种算法推算数据，不必创建容器存储完整的结果，
               从而   节省内存空间。     数据量越大，优势越明显

5.何时使用yield 、 return返回结果？
    1.返回 多 个结果用yield
    2.返回 单 个结果用return

6.枚举函数enumerate
    作用：遍历可迭代对象时，可以将  索引 与  元素 组合为一个元组。

7.zip
        1.语法：
            for item in zip(可迭代对象1, 可迭代对象2….):
    		                    语句
        2.作用：
            将多个可迭代对象中对应的元素组合成一个个 元组，生成的元组个数由最小的可迭代对象决定。

8.生成器表达式
    变量 = ( 表达式 for 变量 in 可迭代对象 [if 真值表达式] )

9.由多个数据所描述的一个实物  ---> 封装数据

10.两种操作
        # 惰性操作/延迟操作
        # 优点：节省内存
        # 缺点：不能灵活访问，即不能使用索引、切片访问


        # 惰性操作  --> 立即操作
        # 优点：灵活访问，即能使用索引、切片访问
        # 缺点：占用内存过多

11.函数式编程

   面向对象编程：封装、     继承、       多态
               分        隔           做
   函数式编程：(嵌入到面向对象编程中)

12.万能查找
        def find(target,func):
            for item in target:
                if func(item):
                    yield item

=====================================

1.面向对象答辩









