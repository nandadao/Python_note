复习
    1.封装：
        数据角度：多个基本数据类型，---- 一个自定义数据类型
        行为角度：对外提供必要的功能，隐藏（私有化）实现细节
                保护数据
                    核心思想：私有化数据
                            提供两个方法（读写）
                            写法一：读写属性
                                @property (读)  # age = property(读取方法age.None)
                                def age(self):
                                    return self.__age
                                @age.setter  (写) # age.setter(age)
                                def age(self, value):
                                    self.__age = value

                            写法二：只读属性
                                class Wife:
                                    def __init__(self):
                                        self.__weight = 100
                                @property
                                def weight(self):
                                    return self.__weight

                                w01 = Wife()
                                w01.weight = 120
                                print(
                            第三种：只写属性
                                class Wife:
                                    def __inti__(self, age):
                                        self.age = age

                                def set_age(self, value):
                                    self.__age = value
                                age = property(None, set_age)


                                w01 = Wife(25)

                                w01= Wife(25)
                                w01 =120
                                print(w01.age)  # 这里报错，因为只能写，不能读
          ××××(重点)
                设计角度：
                    分而治之：将需求分解为多个类
                    变则疏之：变化点，将(行为)变化点定义在类中
                                类与类：行为不同
                                对象与对象：数据不同
                    ×××××××××××××××××××××××××××××
                    高内聚：小而精的类
                    低耦合：类与类的关系松散(没什么关系)

==========================================================================
day12
作业：
    1.三合一
    2.信息管理系统(自己(栈帧，列表)能画出内存图，看懂调用方向，能看懂，代码能跑起来)
    3.(扩展)把购物车 shopping.py 按照信息管理系统的MVC方式写出来。

















