
day06_笔记

1.字典   （最底层的还是列表）
    最大优点：查找最快
       缺点：浪费空间（占用空间过多）
    也就是说：利用空间换取时间的容器

    创建：
        # 创建
            dict01 = {}
            dict02 = dict()  # tuple() list()
            # 区别：第二个需要放可迭代对象，第一个可以随意放

            # 字典 --> 列表  :只是保留了键
            list01 = list(dict01)
            print(list01)  # ['悟空', '八戒', '张无忌']

2、 总结：使用字典与列表的适用性
     列表的优缺点:（详见exercise06.py）
                优点：
                    1.获取数据更为灵活（索引/切片）
                    2.节省内存（因为是顺序排列）
                缺点：
                    1.查找某个元素相对较慢（从头依次开始找）
                     * 代码可读性相对较低（根据索引获取元素）
                            解决方案：
     字典的优缺点:
                优点：
                    1.根据key键查找值速度  最快
                    * 代码可读性相对较高
                缺点：
                    1.获取数据不灵活（key）
                    2.占用内存过多（分散排列）

3、集合
    价值1：去重
    价值2：数学运算


    1.创建
        set01 = {"悟空", "唐僧"}  # 只有键，没有值，没有冒号的是集合
        set02 = {}

        list01 = ["悟空", "唐僧", "悟空"]
        set02 = set(list01)  # {"悟空", "唐僧"}  有去重功能

    2.增加
        set01.add("小白龙")
    3.删除
        if "悟空" in set01:
            set01.remove("悟空")

        set01.discard("悟空")   #  特点是，就算没有“悟空”也不会报错
        print(set01)
======================================================================

作业：
    1.三合一
    2.当天练习独立完成(主要是两层循环，推导式)
    3.画出下列代码内存图
        图一
        list01 = [
                10,{101:"悟空"}
            ]
        list02 = list01
        list01[1][101] = "孙悟空"
        print(list02)


        图二
        dict01 = {
            "唐僧":[25, "男"],
            "八戒":[28, "男"],
        }
        dict02 = dict01[:]
        dict01["八戒"][0] = 29
        print(dict02)

    4.定义数据结构存储以下信息：
        1.存储多个人的多个 爱好
            "qtx":"编码","看书","跑步"
            "lzmly":"看电影","编码","美食","唱歌"  （想想数据结构）
        2.打印qtx的所有爱好（一行一个）
          打印所有人的所有爱好（一行一个）


    5.定义数据结构存储以下信息：
        1.存储多个城市的多个景区和美食
            "北京"
                "景区":"天安门","天坛","故宫"
                "美食":"驴打滚","豆汁"
            "四川"
                "景区":"九寨沟","宽窄巷子"
                "美食":"火锅","串串香"
        2.打印北京的所有美食（一行一个）
          打印所有城市（一行一个）
          （扩展）打印所有城市的所有景区（一行一个）

    6.看书
        程序员的数学
            第五章 排列组合










